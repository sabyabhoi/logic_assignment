<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="262.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="245" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="245" > </text>
<g id="frames">
<g >
<title>cfree (1,171,140 samples, 0.79%)</title><rect x="406.1" y="85" width="9.3" height="15.0" fill="rgb(223,102,2)" rx="2" ry="2" />
<text  x="409.08" y="95.5" ></text>
</g>
<g >
<title>_IO_file_overflow (1,510,856 samples, 1.02%)</title><rect x="1133.5" y="117" width="12.1" height="15.0" fill="rgb(220,126,1)" rx="2" ry="2" />
<text  x="1136.53" y="127.5" ></text>
</g>
<g >
<title>parse_tree::height (3,969,712 samples, 2.68%)</title><rect x="105.2" y="165" width="31.6" height="15.0" fill="rgb(216,105,16)" rx="2" ry="2" />
<text  x="108.22" y="175.5" >pa..</text>
</g>
<g >
<title>parse_tree::prefixToTree (18,054,453 samples, 12.17%)</title><rect x="911.1" y="181" width="143.6" height="15.0" fill="rgb(246,94,30)" rx="2" ry="2" />
<text  x="914.07" y="191.5" >parse_tree::prefix..</text>
</g>
<g >
<title>parse_tree::evaluate (17,664,232 samples, 11.91%)</title><rect x="673.5" y="181" width="140.6" height="15.0" fill="rgb(254,85,42)" rx="2" ry="2" />
<text  x="676.50" y="191.5" >parse_tree::evalu..</text>
</g>
<g >
<title>[libc.so.6] (687,173 samples, 0.46%)</title><rect x="409.9" y="69" width="5.5" height="15.0" fill="rgb(210,27,29)" rx="2" ry="2" />
<text  x="412.93" y="79.5" ></text>
</g>
<g >
<title>_mcount (1,669,771 samples, 1.13%)</title><rect x="123.5" y="149" width="13.3" height="15.0" fill="rgb(219,173,34)" rx="2" ry="2" />
<text  x="126.52" y="159.5" ></text>
</g>
<g >
<title>list::Node::Node (4,052,097 samples, 2.73%)</title><rect x="437.5" y="85" width="32.2" height="15.0" fill="rgb(229,60,0)" rx="2" ry="2" />
<text  x="440.49" y="95.5" >li..</text>
</g>
<g >
<title>operator new (3,280,498 samples, 2.21%)</title><rect x="469.7" y="85" width="26.1" height="15.0" fill="rgb(214,67,1)" rx="2" ry="2" />
<text  x="472.73" y="95.5" >o..</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::rdbuf (564,813 samples, 0.38%)</title><rect x="1124.5" y="133" width="4.5" height="15.0" fill="rgb(241,26,51)" rx="2" ry="2" />
<text  x="1127.52" y="143.5" ></text>
</g>
<g >
<title>malloc (6,791,833 samples, 4.58%)</title><rect x="989.5" y="149" width="54.0" height="15.0" fill="rgb(232,86,7)" rx="2" ry="2" />
<text  x="992.47" y="159.5" >malloc</text>
</g>
<g >
<title>parse_tree::Node::Node (1,410,099 samples, 0.95%)</title><rect x="1043.5" y="165" width="11.2" height="15.0" fill="rgb(216,107,12)" rx="2" ry="2" />
<text  x="1046.51" y="175.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::sputc (187,221 samples, 0.13%)</title><rect x="604.4" y="69" width="1.5" height="15.0" fill="rgb(250,164,51)" rx="2" ry="2" />
<text  x="607.41" y="79.5" ></text>
</g>
<g >
<title>stack::Stack::top (13,407,093 samples, 9.04%)</title><rect x="495.8" y="101" width="106.7" height="15.0" fill="rgb(229,188,23)" rx="2" ry="2" />
<text  x="498.83" y="111.5" >stack::Stack:..</text>
</g>
<g >
<title>malloc (2,823,087 samples, 1.90%)</title><rect x="473.4" y="69" width="22.4" height="15.0" fill="rgb(223,44,49)" rx="2" ry="2" />
<text  x="476.37" y="79.5" >m..</text>
</g>
<g >
<title>[libc.so.6] (3,594,358 samples, 2.42%)</title><rect x="441.1" y="53" width="28.6" height="15.0" fill="rgb(226,190,16)" rx="2" ry="2" />
<text  x="444.13" y="63.5" >[l..</text>
</g>
<g >
<title>[libc.so.6] (15,415,706 samples, 10.40%)</title><rect x="182.2" y="69" width="122.7" height="15.0" fill="rgb(234,30,4)" rx="2" ry="2" />
<text  x="185.24" y="79.5" >[libc.so.6]</text>
</g>
<g >
<title>parse_tree::deleteTree (9,081,613 samples, 6.12%)</title><rect x="33.0" y="165" width="72.2" height="15.0" fill="rgb(231,88,1)" rx="2" ry="2" />
<text  x="35.95" y="175.5" >parse_tr..</text>
</g>
<g >
<title>_IO_putc (1,707,906 samples, 1.15%)</title><rect x="1145.6" y="117" width="13.5" height="15.0" fill="rgb(239,7,34)" rx="2" ry="2" />
<text  x="1148.56" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator[] (224,060 samples, 0.15%)</title><rect x="310.2" y="85" width="1.8" height="15.0" fill="rgb(221,30,32)" rx="2" ry="2" />
<text  x="313.18" y="95.5" ></text>
</g>
<g >
<title>parse_tree::printInorder (17,000,614 samples, 11.46%)</title><rect x="1054.7" y="181" width="135.3" height="15.0" fill="rgb(230,103,25)" rx="2" ry="2" />
<text  x="1057.73" y="191.5" >parse_tree::print..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (1,595,867 samples, 1.08%)</title><rect x="10.0" y="181" width="12.7" height="15.0" fill="rgb(251,25,52)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::pptr (522,293 samples, 0.35%)</title><rect x="1175.5" y="117" width="4.1" height="15.0" fill="rgb(235,36,23)" rx="2" ry="2" />
<text  x="1178.49" y="127.5" ></text>
</g>
<g >
<title>main (67,450,294 samples, 45.48%)</title><rect x="136.8" y="133" width="536.7" height="15.0" fill="rgb(208,213,49)" rx="2" ry="2" />
<text  x="139.80" y="143.5" >main</text>
</g>
<g >
<title>[libc.so.6] (651,213 samples, 0.44%)</title><rect x="53.6" y="133" width="5.2" height="15.0" fill="rgb(235,220,49)" rx="2" ry="2" />
<text  x="56.60" y="143.5" ></text>
</g>
<g >
<title>[unknown] (209,669 samples, 0.14%)</title><rect x="26.7" y="117" width="1.6" height="15.0" fill="rgb(245,98,11)" rx="2" ry="2" />
<text  x="29.65" y="127.5" ></text>
</g>
<g >
<title>std::ios_base::width (573,936 samples, 0.39%)</title><rect x="1108.1" y="149" width="4.6" height="15.0" fill="rgb(225,220,5)" rx="2" ry="2" />
<text  x="1111.14" y="159.5" ></text>
</g>
<g >
<title>_mcount (1,301,948 samples, 0.88%)</title><rect x="48.4" y="149" width="10.4" height="15.0" fill="rgb(220,164,19)" rx="2" ry="2" />
<text  x="51.42" y="159.5" ></text>
</g>
<g >
<title>precedence (248,542 samples, 0.17%)</title><rect x="909.1" y="165" width="2.0" height="15.0" fill="rgb(218,45,25)" rx="2" ry="2" />
<text  x="912.09" y="175.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::to_int_type (375,359 samples, 0.25%)</title><rect x="1179.6" y="117" width="3.0" height="15.0" fill="rgb(205,209,34)" rx="2" ry="2" />
<text  x="1182.64" y="127.5" ></text>
</g>
<g >
<title>stack::Stack::pop (4,421,470 samples, 2.98%)</title><rect x="380.2" y="101" width="35.2" height="15.0" fill="rgb(225,219,24)" rx="2" ry="2" />
<text  x="383.21" y="111.5" >st..</text>
</g>
<g >
<title>[libc.so.6] (582,224 samples, 0.39%)</title><rect x="28.3" y="149" width="4.7" height="15.0" fill="rgb(231,27,43)" rx="2" ry="2" />
<text  x="31.32" y="159.5" ></text>
</g>
<g >
<title>_mcount (2,089,640 samples, 1.41%)</title><rect x="420.9" y="85" width="16.6" height="15.0" fill="rgb(225,67,39)" rx="2" ry="2" />
<text  x="423.86" y="95.5" ></text>
</g>
<g >
<title>_mcount (3,715,461 samples, 2.51%)</title><rect x="1071.2" y="165" width="29.5" height="15.0" fill="rgb(241,178,7)" rx="2" ry="2" />
<text  x="1074.17" y="175.5" >_m..</text>
</g>
<g >
<title>_start (67,450,294 samples, 45.48%)</title><rect x="136.8" y="181" width="536.7" height="15.0" fill="rgb(220,23,43)" rx="2" ry="2" />
<text  x="139.80" y="191.5" >_start</text>
</g>
<g >
<title>std::ostream::sentry::sentry (737,005 samples, 0.50%)</title><rect x="1182.6" y="133" width="5.9" height="15.0" fill="rgb(248,3,47)" rx="2" ry="2" />
<text  x="1185.63" y="143.5" ></text>
</g>
<g >
<title>stack::Stack::push (10,108,715 samples, 6.82%)</title><rect x="415.4" y="101" width="80.4" height="15.0" fill="rgb(208,11,51)" rx="2" ry="2" />
<text  x="418.40" y="111.5" >stack::St..</text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (1,834,829 samples, 1.24%)</title><rect x="651.8" y="69" width="14.6" height="15.0" fill="rgb(228,136,31)" rx="2" ry="2" />
<text  x="654.85" y="79.5" ></text>
</g>
<g >
<title>[libc.so.6] (854,844 samples, 0.58%)</title><rect x="130.0" y="133" width="6.8" height="15.0" fill="rgb(222,56,17)" rx="2" ry="2" />
<text  x="133.00" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (5,648,731 samples, 3.81%)</title><rect x="688.7" y="149" width="45.0" height="15.0" fill="rgb(235,106,48)" rx="2" ry="2" />
<text  x="691.73" y="159.5" >[lib..</text>
</g>
<g >
<title>_IO_getc (726,331 samples, 0.49%)</title><rect x="658.7" y="37" width="5.8" height="15.0" fill="rgb(249,24,35)" rx="2" ry="2" />
<text  x="661.71" y="47.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::sgetc (4,758,165 samples, 3.21%)</title><rect x="635.6" y="85" width="37.9" height="15.0" fill="rgb(213,161,34)" rx="2" ry="2" />
<text  x="638.64" y="95.5" >std..</text>
</g>
<g >
<title>__libc_start_main (67,450,294 samples, 45.48%)</title><rect x="136.8" y="165" width="536.7" height="15.0" fill="rgb(242,229,11)" rx="2" ry="2" />
<text  x="139.80" y="175.5" >__libc_start_main</text>
</g>
<g >
<title>_mcount (6,900,636 samples, 4.65%)</title><rect x="854.2" y="149" width="54.9" height="15.0" fill="rgb(242,29,30)" rx="2" ry="2" />
<text  x="857.18" y="159.5" >_mcount</text>
</g>
<g >
<title>[unknown] (582,224 samples, 0.39%)</title><rect x="28.3" y="133" width="4.7" height="15.0" fill="rgb(253,28,7)" rx="2" ry="2" />
<text  x="31.32" y="143.5" ></text>
</g>
<g >
<title>read (209,669 samples, 0.14%)</title><rect x="26.7" y="133" width="1.6" height="15.0" fill="rgb(251,105,34)" rx="2" ry="2" />
<text  x="29.65" y="143.5" ></text>
</g>
<g >
<title>all (148,298,380 samples, 100%)</title><rect x="10.0" y="213" width="1180.0" height="15.0" fill="rgb(231,196,32)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::gptr (440,038 samples, 0.30%)</title><rect x="616.9" y="101" width="3.6" height="15.0" fill="rgb(213,19,53)" rx="2" ry="2" />
<text  x="619.95" y="111.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::sputc (6,738,505 samples, 4.54%)</title><rect x="1129.0" y="133" width="53.6" height="15.0" fill="rgb(242,94,39)" rx="2" ry="2" />
<text  x="1132.01" y="143.5" >std::..</text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::syncgetc (726,331 samples, 0.49%)</title><rect x="658.7" y="53" width="5.8" height="15.0" fill="rgb(237,19,10)" rx="2" ry="2" />
<text  x="661.71" y="63.5" ></text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::uflow (1,003,783 samples, 0.68%)</title><rect x="627.7" y="69" width="7.9" height="15.0" fill="rgb(211,158,6)" rx="2" ry="2" />
<text  x="630.65" y="79.5" ></text>
</g>
<g >
<title>char_index (10,101,503 samples, 6.81%)</title><rect x="733.7" y="165" width="80.4" height="15.0" fill="rgb(249,60,28)" rx="2" ry="2" />
<text  x="736.68" y="175.5" >char_index</text>
</g>
<g >
<title>parse_tree::deleteTree (651,170 samples, 0.44%)</title><rect x="136.8" y="117" width="5.2" height="15.0" fill="rgb(234,71,36)" rx="2" ry="2" />
<text  x="139.80" y="127.5" ></text>
</g>
<g >
<title>std::ostream::put (187,221 samples, 0.13%)</title><rect x="604.4" y="85" width="1.5" height="15.0" fill="rgb(235,176,54)" rx="2" ry="2" />
<text  x="607.41" y="95.5" ></text>
</g>
<g >
<title>_mcount (18,896,412 samples, 12.74%)</title><rect x="154.5" y="85" width="150.4" height="15.0" fill="rgb(205,51,42)" rx="2" ry="2" />
<text  x="157.54" y="95.5" >_mcount</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (90,365 samples, 0.06%)</title><rect x="22.0" y="149" width="0.7" height="15.0" fill="rgb(211,149,14)" rx="2" ry="2" />
<text  x="24.98" y="159.5" ></text>
</g>
<g >
<title>ungetc (668,947 samples, 0.45%)</title><rect x="668.2" y="69" width="5.3" height="15.0" fill="rgb(240,35,38)" rx="2" ry="2" />
<text  x="671.18" y="79.5" ></text>
</g>
<g >
<title>[unknown] (766,616 samples, 0.52%)</title><rect x="1037.4" y="117" width="6.1" height="15.0" fill="rgb(238,117,34)" rx="2" ry="2" />
<text  x="1040.41" y="127.5" ></text>
</g>
<g >
<title>_mcount (13,185,208 samples, 8.89%)</title><rect x="497.6" y="85" width="104.9" height="15.0" fill="rgb(245,148,23)" rx="2" ry="2" />
<text  x="500.60" y="95.5" >_mcount</text>
</g>
<g >
<title>[libc.so.6] (1,947,964 samples, 1.31%)</title><rect x="89.7" y="133" width="15.5" height="15.0" fill="rgb(239,32,13)" rx="2" ry="2" />
<text  x="92.72" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,415,912 samples, 0.95%)</title><rect x="426.2" y="69" width="11.3" height="15.0" fill="rgb(238,214,2)" rx="2" ry="2" />
<text  x="429.22" y="79.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::egptr (217,627 samples, 0.15%)</title><rect x="666.4" y="69" width="1.8" height="15.0" fill="rgb(229,0,31)" rx="2" ry="2" />
<text  x="669.45" y="79.5" ></text>
</g>
<g >
<title>std::ostream::sentry::~sentry (189,105 samples, 0.13%)</title><rect x="1188.5" y="133" width="1.5" height="15.0" fill="rgb(248,42,32)" rx="2" ry="2" />
<text  x="1191.50" y="143.5" ></text>
</g>
<g >
<title>std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt; (187,221 samples, 0.13%)</title><rect x="604.4" y="101" width="1.5" height="15.0" fill="rgb(224,149,26)" rx="2" ry="2" />
<text  x="607.41" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (238,896 samples, 0.16%)</title><rect x="602.5" y="101" width="1.9" height="15.0" fill="rgb(221,209,42)" rx="2" ry="2" />
<text  x="605.51" y="111.5" ></text>
</g>
<g >
<title>[unknown] (396,507 samples, 0.27%)</title><rect x="984.7" y="149" width="3.2" height="15.0" fill="rgb(243,99,51)" rx="2" ry="2" />
<text  x="987.71" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (651,170 samples, 0.44%)</title><rect x="136.8" y="85" width="5.2" height="15.0" fill="rgb(213,56,52)" rx="2" ry="2" />
<text  x="139.80" y="95.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,989,098 samples, 3.36%)</title><rect x="340.5" y="69" width="39.7" height="15.0" fill="rgb(252,128,22)" rx="2" ry="2" />
<text  x="343.52" y="79.5" >[li..</text>
</g>
<g >
<title>[libc.so.6] (3,771,945 samples, 2.54%)</title><rect x="954.7" y="149" width="30.0" height="15.0" fill="rgb(228,23,32)" rx="2" ry="2" />
<text  x="957.70" y="159.5" >[l..</text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (1,490,830 samples, 1.01%)</title><rect x="1159.1" y="117" width="11.9" height="15.0" fill="rgb(232,160,15)" rx="2" ry="2" />
<text  x="1162.15" y="127.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::snextc (6,667,175 samples, 4.50%)</title><rect x="620.5" y="101" width="53.0" height="15.0" fill="rgb(250,170,35)" rx="2" ry="2" />
<text  x="623.45" y="111.5" >std::..</text>
</g>
<g >
<title>proParser (148,298,380 samples, 100.00%)</title><rect x="10.0" y="197" width="1180.0" height="15.0" fill="rgb(219,19,20)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >proParser</text>
</g>
<g >
<title>_mcount (651,170 samples, 0.44%)</title><rect x="136.8" y="101" width="5.2" height="15.0" fill="rgb(244,169,40)" rx="2" ry="2" />
<text  x="139.80" y="111.5" ></text>
</g>
<g >
<title>std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt; (11,218,199 samples, 7.56%)</title><rect x="1100.7" y="165" width="89.3" height="15.0" fill="rgb(247,225,33)" rx="2" ry="2" />
<text  x="1103.74" y="175.5" >std::opera..</text>
</g>
<g >
<title>_mcount (6,289,252 samples, 4.24%)</title><rect x="683.6" y="165" width="50.1" height="15.0" fill="rgb(231,76,54)" rx="2" ry="2" />
<text  x="686.63" y="175.5" >_mcount</text>
</g>
<g >
<title>[libc.so.6] (4,570,260 samples, 3.08%)</title><rect x="1007.1" y="133" width="36.4" height="15.0" fill="rgb(236,179,45)" rx="2" ry="2" />
<text  x="1010.14" y="143.5" >[li..</text>
</g>
<g >
<title>char_index (7,169,480 samples, 4.83%)</title><rect x="852.0" y="165" width="57.1" height="15.0" fill="rgb(249,143,37)" rx="2" ry="2" />
<text  x="855.04" y="175.5" >char_i..</text>
</g>
<g >
<title>_mcount (9,482,324 samples, 6.39%)</title><rect x="738.6" y="149" width="75.5" height="15.0" fill="rgb(233,60,42)" rx="2" ry="2" />
<text  x="741.60" y="159.5" >_mcount</text>
</g>
<g >
<title>[libc.so.6] (1,908,987 samples, 1.29%)</title><rect x="836.9" y="149" width="15.1" height="15.0" fill="rgb(215,111,30)" rx="2" ry="2" />
<text  x="839.85" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (67,450,294 samples, 45.48%)</title><rect x="136.8" y="149" width="536.7" height="15.0" fill="rgb(249,180,34)" rx="2" ry="2" />
<text  x="139.80" y="159.5" >[libc.so.6]</text>
</g>
<g >
<title>[libc.so.6] (2,359,171 samples, 1.59%)</title><rect x="477.1" y="53" width="18.7" height="15.0" fill="rgb(210,227,0)" rx="2" ry="2" />
<text  x="480.06" y="63.5" ></text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::syncgetc (512,030 samples, 0.35%)</title><rect x="631.6" y="53" width="4.0" height="15.0" fill="rgb(237,47,8)" rx="2" ry="2" />
<text  x="634.57" y="63.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,133,982 samples, 2.79%)</title><rect x="876.2" y="133" width="32.9" height="15.0" fill="rgb(254,151,14)" rx="2" ry="2" />
<text  x="879.20" y="143.5" >[l..</text>
</g>
<g >
<title>[libc.so.6] (8,185,706 samples, 5.52%)</title><rect x="748.9" y="133" width="65.2" height="15.0" fill="rgb(248,77,20)" rx="2" ry="2" />
<text  x="751.92" y="143.5" >[libc.s..</text>
</g>
<g >
<title>[libc.so.6] (1,867,842 samples, 1.26%)</title><rect x="391.2" y="69" width="14.9" height="15.0" fill="rgb(240,22,5)" rx="2" ry="2" />
<text  x="394.22" y="79.5" ></text>
</g>
<g >
<title>parse_tree::infixToPrefix (248,542 samples, 0.17%)</title><rect x="909.1" y="181" width="2.0" height="15.0" fill="rgb(239,217,44)" rx="2" ry="2" />
<text  x="912.09" y="191.5" ></text>
</g>
<g >
<title>precedence (19,123,693 samples, 12.90%)</title><rect x="152.7" y="101" width="152.2" height="15.0" fill="rgb(211,48,51)" rx="2" ry="2" />
<text  x="155.73" y="111.5" >precedence</text>
</g>
<g >
<title>parse_tree::getAtoms (11,944,075 samples, 8.05%)</title><rect x="814.1" y="181" width="95.0" height="15.0" fill="rgb(219,198,43)" rx="2" ry="2" />
<text  x="817.05" y="191.5" >parse_tree:..</text>
</g>
<g >
<title>__overflow (563,094 samples, 0.38%)</title><rect x="1171.0" y="117" width="4.5" height="15.0" fill="rgb(209,33,21)" rx="2" ry="2" />
<text  x="1174.01" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (187,221 samples, 0.13%)</title><rect x="604.4" y="53" width="1.5" height="15.0" fill="rgb(243,125,4)" rx="2" ry="2" />
<text  x="607.41" y="63.5" ></text>
</g>
<g >
<title>reverse (888,124 samples, 0.60%)</title><rect x="304.9" y="101" width="7.1" height="15.0" fill="rgb(244,178,21)" rx="2" ry="2" />
<text  x="307.90" y="111.5" ></text>
</g>
<g >
<title>_mcount (3,250,330 samples, 2.19%)</title><rect x="380.2" y="85" width="25.9" height="15.0" fill="rgb(250,87,24)" rx="2" ry="2" />
<text  x="383.21" y="95.5" >_..</text>
</g>
<g >
<title>_mcount (8,102,183 samples, 5.46%)</title><rect x="315.7" y="85" width="64.5" height="15.0" fill="rgb(222,42,22)" rx="2" ry="2" />
<text  x="318.75" y="95.5" >_mcount</text>
</g>
<g >
<title>_IO_file_underflow (209,669 samples, 0.14%)</title><rect x="26.7" y="149" width="1.6" height="15.0" fill="rgb(254,95,10)" rx="2" ry="2" />
<text  x="29.65" y="159.5" ></text>
</g>
<g >
<title>_mcount (6,259,274 samples, 4.22%)</title><rect x="938.1" y="165" width="49.8" height="15.0" fill="rgb(214,61,16)" rx="2" ry="2" />
<text  x="941.06" y="175.5" >_mcount</text>
</g>
<g >
<title>_IO_default_uflow (209,669 samples, 0.14%)</title><rect x="26.7" y="165" width="1.6" height="15.0" fill="rgb(215,45,51)" rx="2" ry="2" />
<text  x="29.65" y="175.5" ></text>
</g>
<g >
<title>parse_tree::infixToPrefix (58,116,187 samples, 39.19%)</title><rect x="142.0" y="117" width="462.4" height="15.0" fill="rgb(216,141,4)" rx="2" ry="2" />
<text  x="144.98" y="127.5" >parse_tree::infixToPrefix</text>
</g>
<g >
<title>[unknown] (223,584 samples, 0.15%)</title><rect x="20.2" y="165" width="1.8" height="15.0" fill="rgb(216,169,20)" rx="2" ry="2" />
<text  x="23.20" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,955,368 samples, 1.99%)</title><rect x="1077.2" y="149" width="23.5" height="15.0" fill="rgb(232,51,23)" rx="2" ry="2" />
<text  x="1080.22" y="159.5" >[..</text>
</g>
<g >
<title>malloc (582,224 samples, 0.39%)</title><rect x="28.3" y="165" width="4.7" height="15.0" fill="rgb(251,96,54)" rx="2" ry="2" />
<text  x="31.32" y="175.5" ></text>
</g>
<g >
<title>_mcount (3,817,897 samples, 2.57%)</title><rect x="439.3" y="69" width="30.4" height="15.0" fill="rgb(228,61,46)" rx="2" ry="2" />
<text  x="442.35" y="79.5" >_m..</text>
</g>
<g >
<title>[libc.so.6] (10,862,740 samples, 7.32%)</title><rect x="516.1" y="69" width="86.4" height="15.0" fill="rgb(218,87,49)" rx="2" ry="2" />
<text  x="519.08" y="79.5" >[libc.so.6]</text>
</g>
<g >
<title>std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (8,495,716 samples, 5.73%)</title><rect x="605.9" y="117" width="67.6" height="15.0" fill="rgb(238,211,25)" rx="2" ry="2" />
<text  x="608.90" y="127.5" >std::ge..</text>
</g>
<g >
<title>_dl_catch_exception (90,365 samples, 0.06%)</title><rect x="22.0" y="165" width="0.7" height="15.0" fill="rgb(253,194,9)" rx="2" ry="2" />
<text  x="24.98" y="175.5" ></text>
</g>
<g >
<title>operator new (6,992,654 samples, 4.72%)</title><rect x="987.9" y="165" width="55.6" height="15.0" fill="rgb(233,19,44)" rx="2" ry="2" />
<text  x="990.87" y="175.5" >opera..</text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::syncungetc (245,586 samples, 0.17%)</title><rect x="664.5" y="53" width="1.9" height="15.0" fill="rgb(231,110,43)" rx="2" ry="2" />
<text  x="667.49" y="63.5" ></text>
</g>
<g >
<title>_mcount (3,736,165 samples, 2.52%)</title><rect x="822.3" y="165" width="29.7" height="15.0" fill="rgb(229,154,1)" rx="2" ry="2" />
<text  x="825.32" y="175.5" >_m..</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::sbumpc (1,003,783 samples, 0.68%)</title><rect x="627.7" y="85" width="7.9" height="15.0" fill="rgb(239,136,30)" rx="2" ry="2" />
<text  x="630.65" y="95.5" ></text>
</g>
<g >
<title>cfree (5,836,155 samples, 3.94%)</title><rect x="58.8" y="149" width="46.4" height="15.0" fill="rgb(235,130,8)" rx="2" ry="2" />
<text  x="61.78" y="159.5" >cfree</text>
</g>
<g >
<title>std::ostream::put (9,714,499 samples, 6.55%)</title><rect x="1112.7" y="149" width="77.3" height="15.0" fill="rgb(209,23,49)" rx="2" ry="2" />
<text  x="1115.70" y="159.5" >std::ost..</text>
</g>
<g >
<title>_IO_getc (512,030 samples, 0.35%)</title><rect x="631.6" y="37" width="4.0" height="15.0" fill="rgb(213,220,1)" rx="2" ry="2" />
<text  x="634.57" y="47.5" ></text>
</g>
<g >
<title>[unknown] (14,340,303 samples, 9.67%)</title><rect x="22.7" y="181" width="114.1" height="15.0" fill="rgb(211,60,44)" rx="2" ry="2" />
<text  x="25.70" y="191.5" >[unknown]</text>
</g>
<g >
<title>_IO_sputbackc (1,354,024 samples, 0.91%)</title><rect x="641.1" y="69" width="10.7" height="15.0" fill="rgb(240,91,14)" rx="2" ry="2" />
<text  x="644.07" y="79.5" ></text>
</g>
<g >
<title>parse_tree::printInorder (187,221 samples, 0.13%)</title><rect x="604.4" y="117" width="1.5" height="15.0" fill="rgb(224,207,24)" rx="2" ry="2" />
<text  x="607.41" y="127.5" ></text>
</g>
<g >
<title>stack::Stack::empty (8,577,471 samples, 5.78%)</title><rect x="312.0" y="101" width="68.2" height="15.0" fill="rgb(227,166,27)" rx="2" ry="2" />
<text  x="314.96" y="111.5" >stack::..</text>
</g>
</g>
</svg>
